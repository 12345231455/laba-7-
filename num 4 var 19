#include<iostream>
#include<ctime>
#include "glut.h"

using namespace std;


class Point
{
private:
	double x;
	double y;
public:

	void setX(double x)
	{
		this->x = x;
	}
	void setY(double y)
	{
		this->y = y;
	}
	double& getX()
	{
		return x;
	}
	double& getY()
	{
		return y;
	}
};

class Line
{
private:
	Point first;
	Point second;
public:

	void setFirst(Point& a)
	{
		first = a;
	}
	void setSecond(Point& a)
	{
		second = a;
	}
	Point& getFirst()
	{
		return first;
	}
	Point& getSecond()
	{
		return second;
	}
};


Point tmp;
int amount_points = 0;
int amount_points_of_figure = 0;
double Pi = 3.14, e = 2.71;
int n;


double fRand(double fMin, double fMax)
{
	double f = (double)rand() / RAND_MAX;
	return fMin + f * (fMax - fMin);
}

Point make_random_point()
{
	Point a;
	a.setX(fRand(-4, 4));
	a.setY(fRand(-4, 4));
	return a;
}

bool in_figure1(Point& a)
{
	if (a.getX() >= -1 && a.getX() <= 1 && a.getY() <= pow(a.getX(), 2) * sin(2 * a.getX()) && 0 <= a.getY())
	{
		return true;
	}
	return false;
}

bool in_figure2(Point& a)
{

	if ((a.getX() >= (-Pi / 5)) && (a.getX() <= (Pi / 5)) && (0 <= a.getY() && a.getY() <= (1 - (sin(a.getX()) / cos(a.getX()))) / (1 + (sin(a.getX()) / cos(a.getX())))))
	{
		return true;
	}
	return false;
}

bool in_figure3(Point& a)
{
	if (a.getX() >= 1 && a.getX() <= 2 && (a.getY() <= 0 && a.getY() >= (2 - 5 * a.getX()) / sqrt(4 * pow(a.getX(), 2) + 9 * a.getX())))
	{
		return true;
	}
	return false;
}

bool in_figure4(Point& a)
{
	if (a.getX() >= -2 && a.getX() <= 3 && a.getY() >= 0 && a.getY() <= (1 / (1 + pow(e, 2))))
	{
		return true;
	}

	return false;
}

void find_area(double N, double k, double S0)
{
	double result = (k / N) * S0;
	cout << result;
}

void display()
{

	glClear(GL_COLOR_BUFFER_BIT);
	glLoadIdentity();
	glPointSize(1);
	for (int i = 0; i < 1000000; i++)
	{
		glBegin(GL_POINTS);
		tmp = make_random_point();
		if (n == 1)
		{
			if (in_figure1(tmp))
			{
				glColor3d(0.0, 1.0, 0.0);
				glVertex2d(tmp.getX(), tmp.getY());
				amount_points_of_figure++;
			}
			else
			{
				glColor3d(0.0, 0.0, 1.0);
				glVertex2d(tmp.getX(), tmp.getY());
				amount_points++;
			}
		}
		if (n == 2)
		{
			if (in_figure2(tmp))
			{
				glColor3d(0.0, 1.0, 0.0);
				glVertex2d(tmp.getX(), tmp.getY());
				amount_points_of_figure++;
			}
			else
			{
				glColor3d(0.0, 0.0, 1.0);
				glVertex2d(tmp.getX(), tmp.getY());
				amount_points++;
			}
		}
		if (n == 3)
		{
			if (in_figure3(tmp))
			{
				glColor3d(0.0, 1.0, 0.0);
				glVertex2d(tmp.getX(), tmp.getY());
				amount_points_of_figure++;
			}
			else
			{
				glColor3d(0.0, 0.0, 1.0);
				glVertex2d(tmp.getX(), tmp.getY());
				amount_points++;
			}
		}
		if (n == 4)
		{
			if (in_figure4(tmp))
			{
				glColor3d(0.0, 1.0, 0.0);
				glVertex2d(tmp.getX(), tmp.getY());
				amount_points_of_figure++;
			}
			else
			{
				glColor3d(0.0, 0.0, 1.0);
				glVertex2d(tmp.getX(), tmp.getY());
				amount_points++;
			}
		}

	}
	glEnd();
	find_area(amount_points, amount_points_of_figure, 64);
	glutSwapBuffers();
	glFlush();
	return;
}

void timer(int)
{
	glutPostRedisplay();
	glutTimerFunc(1000 / 60, timer, 0);
	display();
}

void reshape(int w, int h)
{
	glViewport(0, 0, 1000, 1000);
	glMatrixMode(GL_PROJECTION_MATRIX);
	glLoadIdentity();
	gluOrtho2D(0, 1000, 0, 1000);
	glMatrixMode(GL_MODELVIEW);
}
void init()
{
	// Цвет фона
	glClearColor(1.0, 1.0, 1.0, 1.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	// Ортогональная проекция
	gluOrtho2D(-2, 2, -2, 2);
	glMatrixMode(GL_MODELVIEW);
}

int main(int argc, char** argv)
{
	srand(time(0));
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);

	setlocale(LC_ALL, "ru");
	cout << "Выберите номер фигуры ";
	cin >> n;
	switch (n)
	{
	case 1:
		glutInitWindowSize(1000, 1000);
		glutCreateWindow("Picture 1");
		init();
		glutDisplayFunc(display);
		glutReshapeFunc(reshape);
		glutMainLoop();

	case 2:
		glutInitWindowSize(1000, 1000);
		glutCreateWindow("Picture 2");
		init();
		glutDisplayFunc(display);
		glutReshapeFunc(reshape);
		glutMainLoop();

	case 3:
		glutInitWindowSize(1000, 1000);
		glutCreateWindow("Picture 3");
		init();
		glutDisplayFunc(display);
		glutReshapeFunc(reshape);
		glutMainLoop();

	case 4:
		glutInitWindowSize(1000, 1000);
		glutCreateWindow("Picture 4");
		init();
		glutDisplayFunc(display);
		glutReshapeFunc(reshape);
		glutMainLoop();

	case 5:
		break;
	}

}
