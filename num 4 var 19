#include <iostream>
#include <vector>
#include <cmath>
#include "glut.h"

using namespace std;

int equation = 3;
double M_PI = 3.14;
double M_E = 2.71;

int width = 1000;
int height = 800;

struct point
{
	double x, y;

	void rand_point2(double w1, double w2, double h1 = -height, double h2 = height, int precision = 10000) 
	{
		if (w2 == w1)
			x = w1;
		else
			x = ((rand() * rand() % (int)round((w2 - w1) * precision)) + w1 * precision) / precision;
		if (h2 == h1)
			y = h1;
		else
			y = ((rand() * rand() % (int)round((h2 - h1) * precision)) + h1 * precision) / precision;
	}
};


bool equation_a(point p) 
{
	return p.x >= -1 && p.x <= 1 && p.y <= pow(p.x, 2) * sin(2 * p.x) && 0 <= p.y;
}

bool equation_b(point p) 
{
	return p.x >= -M_PI / 5 && p.x <= M_PI / 5 && (0 <= p.y && p.y <= pow(sin(p.x), 3) || 0 >= p.y && p.y >= pow(sin(p.x), 3));
}

bool equation_c(point p) 
{
	return p.x >= 3 && p.x <= 11 && (0 <= p.y && p.y <= 1.0 / (4 * p.x * p.x - 9) || 0 >= p.y && p.y >= 1.0 / (4 * p.x * p.x - 9));
}

bool equation_d(point p) 
{
	return p.x >= -1 && p.x <= 1 && (0 <= p.y && p.y <= pow(M_E, 2 * p.x - 1) / pow(M_E, p.x) || 0 >= p.y && p.y >= pow(M_E, 2 * p.x - 1) / pow(M_E, p.x));
}

void init()
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0, width, 0, height);
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);
}

void display()
{
	glClear(GL_COLOR_BUFFER_BIT);
	glFlush();
}

void OXY()
{
	glBegin(GL_LINES);
	glColor3f(1.0, 0.0, 0.0);

	glVertex2i(0, -height);
	glVertex2i(0, height);
	glVertex2i(-width, 0);
	glVertex2i(width, 0);

	glEnd();
	glFlush();
}

void draw_point(const point& A, double R, double G, double B, double size)
{
	glPointSize(size);
	glBegin(GL_POINTS);
	glColor3f(R, G, B);
	glVertex2i(A.x * 200, A.y * 200);
	glEnd();
	glFlush();
}

void solve4()
{
	display();

	int k = 1000000;
	point p;
	int count = 0;
	double S = 0;
	double R, G, B;
	double a = 0, b = 0;
	double ay = -2, by = 2;

	switch (equation) 
	{
	case 0:
	{
		int Scale = 600;

		a = -1, b = 1;
		for (int i = 0; i < k; i++)
		{
			p.rand_point2(a, b, ay, by);
			if (equation_a(p))
			{
				count++;
				double R, G, B;
				R = ((rand() % 18) - 6) / 10.0;
				G = ((rand() % 18) - 4) / 10.0;
				B = ((rand() % 18) - 3) / 10.0;
				draw_point(p, R, G, B, 2);
			}
		}
		break;
	}
	case 1:
	{
		int Scale = 300;

		a = -2 * M_PI / 3, b = 2 * M_PI / 3;
		for (int i = 0; i < k; i++)
		{
			p.rand_point2(a, b, ay, by);
			if (equation_b(p))
			{
				count++;
				R = ((rand() % 18) - 6) / 10.0;
				G = ((rand() % 18) - 4) / 10.0;
				B = ((rand() % 18) - 3) / 10.0;
				draw_point(p, R, G, B, 1);
			}
		}
		break;
	}
	case 2:
	{
		int Scale = 80;

		a = 3, b = 11;
		R = ((rand() % 18) - 6) / 10.0;
		G = ((rand() % 18) - 4) / 10.0;
		B = ((rand() % 18) - 3) / 10.0;
		for (int i = 0; i < k; i++)
		{
			p.rand_point2(a, b, ay, by);
			if (equation_c(p))
			{
				count++;
				draw_point(p, R, G, B, 2);
			}
		}
		break;
	}
	case 3:
	{
		int Scale = 600;

		a = -1, b = 1;
		for (int i = 0; i < k; i++)
		{
			p.rand_point2(a, b, ay, by);

			if (equation_d(p))
			{
				count++;
				R = ((rand() % 18) - 6) / 10.0;
				G = ((rand() % 18) - 4) / 10.0;
				B = ((rand() % 18) - 3) / 10.0;
				draw_point(p, R, G, B, 2);
			}
		}
		break;
	}
	}
	S = count * 1.0 * (b - a) * (by - ay) / k;
	int Scale = 80;
	cout << S << "\n";
}

void keyboard(unsigned char key, int x, int y) 
{
	switch (key) 
	{
	case 27:
		exit(0);
		break;
	case 'a':
		if (equation == 0)
			equation = 3;
		else
			equation--;
		break;
	case 'd':
		if (equation == 3)
			equation = 0;
		else
			equation++;
		break;
	}
	solve4();
}

int main(int argc, char** argv)
{
	int Scale = 80;

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB);
	glutInitWindowSize(width, height);
	glutInitWindowPosition(400, 100);
	glutCreateWindow("");
	init();
	OXY();
	glutDisplayFunc(solve4);
	glutKeyboardFunc(keyboard);
	glutMainLoop();
}
