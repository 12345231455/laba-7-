#include <iostream>
#include <vector>
#include <fstream>
#include <Windows.h>
#include "glut.h"

using namespace std;

int W = 50;
int H = 40;

double Scale = 25;

double width = Scale * W;
double height = Scale * H;


struct point
{
	double x, y;

	point() = default;
	point(double x, double y) : x(x), y(y) {}
	point(int x, int y) : x(x), y(y) {}
	point& operator=(const point& B) 
	{
		x = B.x;
		y = B.y;
		return *this;
	}
	point operator+(point B) const 
	{
		point res;
		res.x = x + B.x;
		res.y = y + B.y;
		return res;
	}
	point operator-(point B) const 
	{
		point res;
		res.x = x - B.x;
		res.y = y - B.y;
		return res;
	}
	point operator*(double k) const 
	{
		point res;
		res.x = x * k;
		res.y = y * k;
		return res;
	}
	point operator/(double k) const
	{
		point res;
		res.x = x / k;
		res.y = y / k;
		return res;
	}
	void rand_point(int w = width, int h = height, int precision = 1) 
	{
		x = ((rand() * rand() % (w * 2 * precision)) - w * precision) * 1.0 / precision;
		y = ((rand() * rand() % (h * 2 * precision)) - h * precision) * 1.0 / precision;
	}
	void rand_point2(double w1, double w2, double h1 = -height, double h2 = height, int precision = 10000) 
	{
		if (w2 == w1)
		{
			x = w1;
		}
		else
		{
			x = ((rand() * rand() % (int)round((w2 - w1) * precision)) + w1 * precision) / precision;
		}
		if (h2 == h1)
		{
			y = h1;
		}
		else
		{
			y = ((rand() * rand() % (int)round((h2 - h1) * precision)) + h1 * precision) / precision;
		}
	}
	void line(const point& B, double& a, double& b, double& c) const 
	{
		a = B.y - y, b = x - B.x, c = (-a) * x + (-b) * y;
	}
	double line(const point& B, const point& C) const 
	{
		double a = B.y - y, b = x - B.x, c = (-a) * x + (-b) * y;
		return a * C.x + b * C.y + c;
	}
	double dist2() const
	{
		return x * x + y * y;
	}
	double dot(const point& B) const
	{
		return x * B.x + y * B.y;
	}
	double cross(const point& B) const
	{
		return x * B.y - y * B.x;
	}
	bool operator==(const point& B) const
	{
		return x == B.x && y == B.y;
	}
	bool operator!=(const point& B) const
	{
		return !(*this == B);
	}
	bool operator==(const int& B) const 
	{
		return x == B && y == B;
	}
	bool operator!=(const int& B) const
	{
		return !(*this == B);
	}
	friend istream& operator>>(istream& in, point& p)
	{
		in >> p.x >> p.y;
		return in;
	}
	friend ostream& operator<<(ostream& out, const point& p) 
	{
		out << p.x << " " << p.y;
		return out;
	}
};

void OXY()
{
	glBegin(GL_LINES);
	glColor3f(1.0, 0.0, 0.0);

	glVertex2i(0, -height);
	glVertex2i(0, height);
	glVertex2i(-width, 0);
	glVertex2i(width, 0);

	glEnd();
	glFlush();
}

void init()
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0, width, 0, height);
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);
}

void display()
{
	glClear(GL_COLOR_BUFFER_BIT);
	//OXY();
	//glutSwapBuffers();
	glFlush();
}

void timer(int = 0)
{
	display();
	glutTimerFunc(100, timer, 0);
}

void draw_point(const vector<point>& A, double R = 0, double G = 0.5, double B = 0, double size = 5.0)
{
	glPointSize(size);
	glBegin(GL_POINTS);
	glColor3f(R, G, B);
	for (int i = 0; i < A.size(); i++)
	{
		glVertex2i(A[i].x * Scale, A[i].y * Scale);
	}
	glEnd();
	glFlush();
}

void draw_point(const point& A, double R = 0, double G = 0.5, double B = 0, double size = 5.0)
{
	glPointSize(size);
	glBegin(GL_POINTS);
	glColor3f(R, G, B);
	glVertex2i(A.x * Scale, A.y * Scale);
	glEnd();
	glFlush();
}

int nu = 7, m = 15;
double R = 0.5;

void rand_points(vector<point>& A, int n)
{
	A.push_back({ (rand() % W * 2) - W,(rand() % H * 2) - H });
	A.push_back({ (rand() % W * 2) - W,(rand() % H * 2) - H });
	while (A.size() < n)
	{
		A.push_back({ (rand() % W * 2) - W,(rand() % H * 2) - H });
		for (int i = 2; i < A.size(); i++)
		{
			if (abs(A[i - 2].line(A[i - 1], A[A.size() - 1])) < 0.00001)
			{
				A[A.size() - 1] = { (rand() % W * 2) - W,(rand() % H * 2) - H };
				i = 1;
			}
		}
	}
}

void rand_M(vector<point>& A, point& p)
{
	int r = rand() % m;
	int it = 0;
	int mod = m % nu;
	int d = m / nu;
	for (int i = 0; i < nu; i++)
	{
		r -= d + (nu - mod == i);
		if (r < 0)
		{
			it = i;
			break;
		}
	}

	point s = A[it];
	for (double i = R; i != 1; i *= 2)
	{
		s = (s + p) * 0.5;
	}
	p = s;
}

void solve2()
{
	display();

	srand(time(0));
	vector<point> A;
	point p;
	rand_points(A, nu);
	p = { (rand() % W * 2) - W,(rand() % H * 2) - H };
	draw_point(A, 0.5, 0);

	for (int i = 0; i < 1e6; i++)
	{
		rand_M(A, p);
		draw_point(p, 0, 5, 0, 0.5);
	}
}

void task2(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB);
	glutInitWindowSize(width, height);
	glutInitWindowPosition(400, 100);
	glutCreateWindow("лаба 7 номер 2");
	init();
	OXY();
	glutDisplayFunc(solve2);
	glutMainLoop();
}

int main(int argc, char** argv)
{
	setlocale(LC_ALL, "ru");
	task2(argc, argv);
}
