#include <iostream>
#include <cmath>
#include <vector>
#include <ctime>
#include "glut.h"

using namespace std;

const int N = 7;
const int M = 15;
float kf = 0.5;

int rnd(int max) 
{
	return rand() % max;
}

int rnd(int max, int k) 
{
	srand(time(0) * k);
	return rand() % max;
}

struct Point
{
	int x, y;
};

void DrawMP()
{
	glPointSize(10);
	glBegin(GL_POINTS);
	glColor3f(1, 1, 1);
	glVertex2f(0, 0);
	glEnd();
}

void DrawOP() 
{
	glPointSize(2);
	glBegin(GL_POINTS);
	glColor3f(0, 0, 1);
	glVertex2f(0, 0);
	glEnd();
}

void RandMPINIT(Point*& MP, const int& MPSIZE) 
{
	int x, y;
	for (int i = 0; i < MPSIZE; i++)
	{
		srand(time(0) * i);
		x = rnd(1000);
		srand(time(0) * x);
		y = rnd(1000);
		MP[i].x = x;
		MP[i].y = y;
	}
}

void ShowMP(Point*& MP, const int& MPSIZE) 
{
	for (int i = 0; i < MPSIZE; i++)
	{
		glPushMatrix();
		glTranslatef(MP[i].x, MP[i].y, 0);
		DrawMP();
		glPopMatrix();
	}
}

void ShowOP(vector <Point>& OP) 
{
	for (int i = 0; i < OP.size(); i++) 
	{
		glPushMatrix();
		glTranslatef(OP[i].x, OP[i].y, 0);
		DrawOP();
		glPopMatrix();
	}
}

vector <Point> OP;
Point* MP = new Point[N];

void display()
{
	glClear(GL_COLOR_BUFFER_BIT);
	ShowMP(MP, N);
	ShowOP(OP);
	glutSwapBuffers();
}

int i = 0;

void idle() 
{
	i++;
	int x1, y1;
	int x0 = OP[i - 1].x;
	int y0 = OP[i - 1].y;
	int t = rnd(M, i) % N;
	x1 = MP[t].x;
	y1 = MP[t].y;
	Point OPoint;
	OPoint.x = int(kf * (x1 - x0) + x0);
	OPoint.y = int(kf * (y1 - y0) + y0);
	OP.push_back(OPoint);
	glutPostRedisplay();
}

int main(int argc, char** argv) 
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(1200, 1000);
	glutCreateWindow("laba 7 num 2");
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	gluOrtho2D(0, 1000, 0, 1000);
	OP.resize(OP.size() + 1);
	OP[OP.size() - 1].x = int(rnd(1000));
	OP[OP.size()-1].y = int(rnd(1000) * 10000);
	RandMPINIT(MP, N);
	glutDisplayFunc(display);
	glutIdleFunc(idle);
	glutMainLoop();
}
