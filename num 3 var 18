#include <iostream>
#include <vector>
#include <cmath>
#include <fstream>
#include <Windows.h>
#include "glut.h"

using namespace std;

int W = 50;
int H = 40;

double Scale = 20;

double width = Scale * W;
double height = Scale * H;

struct point
{
	double x, y;
	point() = default;
	point(double x, double y) : x(x), y(y) {}
	point(int x, int y) : x(x), y(y) {}
	point& operator=(const point& B) 
	{
		x = B.x;
		y = B.y;
		return *this;
	}
	point operator+(point B) const 
	{
		point res;
		res.x = x + B.x;
		res.y = y + B.y;
		return res;
	}
	point operator-(point B) const
	{
		point res;
		res.x = x - B.x;
		res.y = y - B.y;
		return res;
	}
	point operator*(double k) const
	{
		point res;
		res.x = x * k;
		res.y = y * k;
		return res;
	}
	point operator/(double k) const 
	{
		point res;
		res.x = x / k;
		res.y = y / k;
		return res;
	}
	void rand_point(int w = width, int h = height, int precision = 1) 
	{
		x = ((rand() * rand() % (w * 2 * precision)) - w * precision) * 1.0 / precision;
		y = ((rand() * rand() % (h * 2 * precision)) - h * precision) * 1.0 / precision;
	}
	void rand_point2(double w1, double w2, double h1 = -height, double h2 = height, int precision = 10000) 
	{
		if (w2 == w1)
			x = w1;
		else
			x = ((rand() * rand() % (int)round((w2 - w1) * precision)) + w1 * precision) / precision;
		if (h2 == h1)
			y = h1;
		else
			y = ((rand() * rand() % (int)round((h2 - h1) * precision)) + h1 * precision) / precision;
	}
	void line(const point& B, double& a, double& b, double& c) const 
	{
		a = B.y - y, b = x - B.x, c = (-a) * x + (-b) * y;
	}
	double line(const point& B, const point& C) const
	{
		double a = B.y - y, b = x - B.x, c = (-a) * x + (-b) * y;
		return a * C.x + b * C.y + c;
	}
	double dist2() const 
	{
		return x * x + y * y;
	}
	double dot(const point& B) const 
	{
		return x * B.x + y * B.y;
	}
	double cross(const point& B) const 
	{
		return x * B.y - y * B.x;
	}
	bool operator==(const point& B) const 
	{
		return x == B.x && y == B.y;
	}
	bool operator!=(const point& B) const
	{
		return !(*this == B);
	}
	bool operator==(const int& B) const 
	{
		return x == B && y == B;
	}
	bool operator!=(const int& B) const 
	{
		return !(*this == B);
	}
	friend istream& operator>>(istream& in, point& p) 
	{
		in >> p.x >> p.y;
		return in;
	}
	friend ostream& operator<<(ostream& out, const point& p) 
	{
		out << p.x << " " << p.y;
		return out;
	}
};

void init()
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0, width, 0, height);
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);
}

void display()
{
	glClear(GL_COLOR_BUFFER_BIT);
	glFlush();
}

void OXY()
{
	glBegin(GL_LINES);
	glColor3f(1.0, 0.0, 0.0);

	glVertex2i(0, -height);
	glVertex2i(0, height);
	glVertex2i(-width, 0);
	glVertex2i(width, 0);

	glEnd();
	glFlush();
}

void draw_point(const point& A, double R = 0, double G = 0.5, double B = 0, double size = 5.0)
{
	glPointSize(size);
	glBegin(GL_POINTS);
	glColor3f(R, G, B);
	glVertex2i(A.x * Scale, A.y * Scale);
	glEnd();
	glFlush();
}

void draw_line(vector<point>& C, double R = 0, double G = 0.5, double B = 0)
{
	glBegin(GL_LINES);
	glColor3f(R, G, B);
	for (int i = 0; i < C.size(); i++)
	{
		glVertex2i(C[i].x * Scale, C[i].y * Scale);
		glVertex2i(C[(i + 1) % C.size()].x * Scale, C[(i + 1) % C.size()].y * Scale);
	}
	glEnd();
	glFlush();
}

bool is_graph(point a) 
{
	return pow(a.x, 4) + 2 * pow(a.y, 3) < 1 && pow(a.x, 2) - 5 * a.y <= 9;
}

void solve3()
{
	display();
	int k = 1000000;
	point a;
	int cnt = 0;
	for (int i = 0; i < k; i++)
	{
		a.rand_point(2, 2, 100);
		if (is_graph(a))
		{
			cnt++;
			double R, G, B;
			R = ((rand() % 18) - 6) / 10.0;
			G = ((rand() % 18) - 4) / 10.0;
			B = ((rand() % 18) - 3) / 10.0;
			draw_point(a, R, G, B, 1);
		}
	}
	double S = cnt * 1.0 / k * 16;
	cout << S;
}

void task3(int argc, char** argv)
{
	Scale = 300;
	vector<point> A = { {-2,-2},{-2,2},{2,2},{2,-2} };
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB);
	glutInitWindowSize(width, height);
	glutInitWindowPosition(400, 100);
	glutCreateWindow("14");
	init();
	OXY();
	draw_line(A, 1, 1);
	glutDisplayFunc(solve3);
	glutMainLoop();
}

int main(int argc, char** argv)
{
	task3(argc, argv);
}
