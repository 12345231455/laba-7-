#include <iostream>
#include <vector>
#include <cmath>
#include "glut.h"

using namespace std;

double width = 1000;
double height = 800;

struct point
{
	double x, y;
	void rand_point(int w = width, int h = height, int precision = 1)
	{
		x = ((rand() * rand() % (w * 2 * precision)) - w * precision) * 1.0 / precision;
		y = ((rand() * rand() % (h * 2 * precision)) - h * precision) * 1.0 / precision;
	}
};

void init()
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0, width, 0, height);
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);
}

void display()
{
	glClear(GL_COLOR_BUFFER_BIT);
	glFlush();
}

void OXY()
{
	glBegin(GL_LINES);
	glColor3f(1.0, 0.0, 0.0);

	glVertex2i(0, -height);
	glVertex2i(0, height);
	glVertex2i(-width, 0);
	glVertex2i(width, 0);

	glEnd();
	glFlush();
}

void draw_point(const point& A, double R, double G, double B, double size)
{
	glPointSize(size);
	glBegin(GL_POINTS);
	glColor3f(R, G, B);
	glVertex2i(A.x * 200, A.y * 200);
	glEnd();
	glFlush();
}

bool is_graph(point a)
{
	return pow(a.x, 4) + 2 * pow(a.y, 3) < 1 && pow(a.x, 2) - 5 * a.y < 9;
}

void solve3()
{
	display();
	int k = 1000000;
	point a;
	int count = 0;
	for (int i = 0; i < k; i++)
	{
		a.rand_point(2, 2, 100);
		if (is_graph(a))
		{
			count++;
			double R, G, B;
			R = ((rand() % 18) - 6) / 10.0;
			G = ((rand() % 18) - 4) / 10.0;
			B = ((rand() % 18) - 3) / 10.0;
			draw_point(a, R, G, B, 2);
		}
	}
	double S = count * 1.0 / k * 16;
	cout << S;
}

int main(int argc, char** argv)
{
	vector<point> A = { {-2,-2},{-2,2},{2,2},{2,-2} };
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB);
	glutInitWindowSize(width, height);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("laba 7 num 3");
	init();
	OXY();
	glutDisplayFunc(solve3);
	glutMainLoop();
}
